{"version":3,"sources":["serviceWorker.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/seach-box/search-box.component.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","fam","id","name","email","CardList","family","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCdOC,G,kBAAO,SAAAC,GAChB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,IAAIC,GAApC,4BACtB,gCAAOL,EAAMI,IAAIE,KAAjB,KACA,+BAAKN,EAAMI,IAAIG,MAAf,QCJCC,EAAW,SAAAR,GACpB,OACI,yBAAKC,UAAU,aACVD,EAAMS,OAAOC,KAAI,SAAAN,GAAG,OACrB,kBAAC,EAAD,CAAMO,IAAKP,EAAIC,GAAID,IAAKA,SCNvBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCCG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXd,OAAQ,GACRW,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,OAAQmB,S,+BAO9B,IAAD,EACyBC,KAAKN,MAA7Bd,EADD,EACCA,OAAQW,EADT,EACSA,YACVU,EAAmBrB,EAAOsB,QAAO,SAAAC,GAAO,OAC5CA,EAAQ1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAClD,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CACEY,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,OAAQqB,S,GA7BRK,IAAMC,WCIxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13100e6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.fam.id}?set=set2&size=180x180`}/>\r\n            <h2 > {props.fam.name} </h2>\r\n            <p> {props.fam.email} </p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\"> \r\n            {props.family.map(fam => (\r\n            <Card key={fam.id} fam={fam}/>\r\n            ))}\r\n        </div>\r\n    )\r\n    \r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className=\"search\" \r\n    type=\"search\" \r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n    />\r\n)\r\n\r\n","import React from 'react';\n\n\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchBox } from './components/seach-box/search-box.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      family: [],\n      searchField: ''\n  }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({family: users}));\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const { family, searchField } = this.state;\n    const filteredMonsters = family.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList family={filteredMonsters} />\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\n\nimport App from './App.js';\n\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}